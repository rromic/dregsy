#!/usr/bin/env bash

#
# Copyright 2020 Alexander Vollschwitz
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Note: All variables defined in Makefile can be directly accessed here.
#

# shellcheck disable=SC2034
{
# formatting
BLD="\e[1m"
DIM="\e[2m"
ITL="\e[3m"
NRM="\e[0m"
OK="\e[01;32m"
ERR="\e[01;31m"
}

#
#
#
function synopsis {

    files=()

    command -v gawk > /dev/null || echo "Note: proper help display requires gawk!"

    for file in ${MAKEFILE_LIST}; do
        if [[ "$(basename "${file}")" == "Makefile" ]]; then
            files+=( "../${file}" )
        fi
    done

    echo -e "\n${BLD}TARGETS${NRM}"
    print_sorted_help "$(cat "${files[@]}" \
        | gawk '{FS=":"}
            /^[a-zA-Z0-9][-a-zA-Z0-9_\.]+:{1,2}[-a-zA-Z0-9_\. ]*$/{f=1; printf "\n${ITL}${BLD}%s${NRM}\n", $1; next}
            /^[^#].*$/{f=0} f' \
        | tr -d '#')"

    echo -e "\n${BLD}NOTES${NRM}\n"

    # .makerc settings
    print_formatted_help "$(cat "${files[@]}" \
        | gawk '/^## makerc$/{f=1; next} /^[^#].*$/{f=0} /^$/{f=0} f' \
        | tr -d '#')"
    echo

    # env settings
    print_formatted_help "$(cat "${files[@]}" \
        | gawk '/^## env$/{f=1; next} /^[^#].*$/{f=0} /^$/{f=0} f' \
        | tr -d '#')"

    # other notes
    print_formatted_help "$(cat "${files[@]}" \
        | gawk '/^##$/{f=1; printf "-%s", $0; next} /^[^#].*$/{f=0} /^$/{f=0} f' \
        | tr -d '#')"
    echo
}

#
# $1    help text
#
function print_sorted_help {
    print_formatted_help "$1" \
        | gawk 'BEGIN{print "\0"}
            /^$/{printf "\0"} {print $0}' \
        | sort -z \
        | tr -d '\000' \
        | tail -n+2
}

#
# $1    help text
#
function print_formatted_help {
    echo -e "$(apply_shell_expansion "$1")" | uniq
}

#
# $1    string to expand
#
function apply_shell_expansion {
    declare data="$1"
    declare delimiter="__apply_shell_expansion_delimiter__"
    declare command="cat <<${delimiter}"$'\n'"${data}"$'\n'"${delimiter}"
    eval "${command}"
}

#
#
#
function registry_up {
    docker run -d --rm -p 5001:5000 --name dregsy-test-registry registry:2
}

#
#
#
function registry_down {
    docker stop dregsy-test-registry || true
    docker container wait dregsy-test-registry || true
}

#
#
#
function registry_restart {
    registry_down
    registry_up
}

#
# $...  reference patterns to filter on
#
function remove_test_images {

    local list=()
    for ref in "$@"; do
      while IFS= read -r image_id; do
          list+=("$image_id")
      done < <(docker images -q --filter=reference="${ref}")
    done

    list=()
    while IFS= read -r item; do
        sorted_unique_list+=("$item")
    done < <(echo "${list[@]}" | tr ' ' '\n' | sort | uniq)

    for img in "${list[@]}"; do
        docker rmi -f "${img}"
    done
}

#
# build command binary
#
# $1    command
# $2    target OS
# $3    target architecture
#
function build_binary {

    local binary="${BINARIES}/$1"

    local extra_env
    [[ "$3" != "arm" ]] || extra_env="-e GOARM=7"
    [[ "$3" != "mips" ]] || extra_env="-e GOMIPS=softfloat"

    local digest_ref="GO_IMAGE_DIGEST_${GOARCH}"

    echo -e "building ${binary} for $2/$3, using build image ${GO_IMAGE}@sha256:${!digest_ref}"
    # shellcheck disable=SC2086
    docker run --rm --user "$(id -u):$(id -g)" \
        -v "${ROOT}/${BINARIES}:/go/bin" ${CACHE_VOLS} \
        -v "${ROOT}:/go/src/${REPO}" -w "/go/src/${REPO}" \
        -e HOME="/tmp" -e GIT_CONFIG="/tmp/.gitconfig" -e CGO_ENABLED=0 -e GOOS="$2" -e GOARCH="$3" ${extra_env} \
        ${GO_IMAGE}@sha256:${!digest_ref} bash -c \
            "git config --add safe.directory /go/src/${REPO} && go mod tidy && go build -v -tags netgo -installsuffix netgo \
            -ldflags \"-w -X main.DregsyVersion=${DREGSY_VERSION}\" \
            -o \"${binary}\" \"./cmd/$1/\""

    local specifier="_${DREGSY_VERSION}_$2_$3"
    zip -j "../${binary}${specifier}.zip" "../${binary}"
    rm -f "../${binary}"

    echo
}

#
# $1    test image variant (`alpine` or `ubuntu`)
#
function run_tests {

    echo -e "\ntesting using $1-based image:"

    # shellcheck disable=SC2086
    docker run --privileged --network host --rm  \
        -v "${ROOT}:/go/src/${REPO}" -w "/go/src/${REPO}" \
        -v "${ROOT}/${BINARIES}:/go/bin" \
        -v /var/run/docker.sock:/var/run/docker.sock \
        ${CACHE_VOLS} ${GCP_CREDS} \
        -e CGO_ENABLED=0 -e GOOS=linux -e GOARCH=${GOARCH} \
        -e LOG_LEVEL=debug -e LOG_FORMAT=text -e LOG_FORCE_COLORS=true \
        --env-file <(sed -E 's/\ +=\ +/=/g' "${ROOT}/.makerc") \
        "xelalex/${REPO}-tests-$1" sh -c "\
            go test ${TEST_OPTS} \
                -coverpkg=./... -coverprofile=${BUILD_OUTPUT}/coverage.out \
                -covermode=count ./... && \
            go tool cover -html=${BUILD_OUTPUT}/coverage.out \
                -o ${BUILD_OUTPUT}/coverage-$1.html"

    echo -e "\ncoverage report is in ${BUILD_OUTPUT}/coverage-$1.html\n"
}

#
#
#
function get_architecture {

    local arch
    arch="$(uname -m)"

    case ${arch} in
        x86_64)
            echo -n "amd64"
            ;;
        x86|i386|i686)
            echo -n "386"
            ;;
        armv5*|armv6*|armv7*)
            echo -n "arm"
            ;;
        aarch64|arm64)
            echo -n "arm64"
            ;;
        *)
            echo -e "\nUnsupported architecture: ${arch}\n" >&2
            return 1
            ;;
    esac
}

#
#
#

cd "$(dirname "$0")" || exit 1
"$@"
